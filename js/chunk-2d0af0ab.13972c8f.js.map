{"version":3,"sources":["webpack:///./src/docs/api/-_interact_interact.ts.html"],"names":["module","exports"],"mappings":"mGAAAA,EAAAC,QAAA","file":"js/chunk-2d0af0ab.13972c8f.js","sourcesContent":["module.exports = \"<nav class=\\\"jsdoc-nav\\\">\\n<li class=\\\"nav-link nav-home-link\\\"><a href=\\\"/docs/api/index.html\\\">Home</a></li><li class=\\\"nav-heading\\\">Classes</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html\\\">DropEvent</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html#reject\\\">reject</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html\\\">Interactable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#context\\\">context</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#deltaSource\\\">deltaSource</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#draggable\\\">draggable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropCheck\\\">dropCheck</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropzone\\\">dropzone</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#fire\\\">fire</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#gesturable\\\">gesturable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#getRect\\\">getRect</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#off\\\">off</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#on\\\">on</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#origin\\\">origin</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#rectChecker\\\">rectChecker</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#reflow\\\">reflow</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#resizable\\\">resizable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#set\\\">set</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#unset\\\">unset</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"InteractEvent_InteractEvent.html\\\">InteractEvent</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"module.exports.html\\\">exports</a></span></li><li class=\\\"nav-heading\\\">Modules</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html#.maxInteractions\\\">maxInteractions</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-modifiers_snapEdges.html\\\">modifiers/snapEdges</a></span></li><li class=\\\"nav-heading\\\"><a href=\\\"global.html\\\">Globals</a></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-member\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#interact\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#preventDefault\\\">preventDefault</a></span></li>\\n</nav>\\n\\n\\n<h1 class=\\\"page-title\\\">/interact/interact.ts</h1>\\n\\n\\n\\n\\n\\n\\n    \\n    <section>\\n        <article>\\n            <pre class=\\\"prettyprint source linenums\\\"><code>/** @module interact */\\n\\nimport { Options } from '@interactjs/core/defaultOptions'\\nimport Interactable from '@interactjs/core/Interactable'\\nimport { Scope } from '@interactjs/core/scope'\\nimport * as utils from '@interactjs/utils'\\nimport browser from '@interactjs/utils/browser'\\nimport events from '@interactjs/utils/events'\\n\\ndeclare module '@interactjs/core/scope' {\\n  interface Scope {\\n    interact: InteractStatic\\n  }\\n}\\n\\nexport interface InteractStatic {\\n  (target: Interact.Target, options?: Options): Interactable\\n  on: typeof on\\n  pointerMoveTolerance: typeof pointerMoveTolerance\\n  stop: typeof stop\\n  supportsPointerEvent: typeof supportsPointerEvent\\n  supportsTouch: typeof supportsTouch\\n  debug: typeof debug\\n  off: typeof off\\n  isSet: typeof isSet\\n  use: typeof use\\n  getPointerAverage: typeof utils.pointer.pointerAverage\\n  getTouchBBox: typeof utils.pointer.touchBBox\\n  getTouchDistance: typeof utils.pointer.touchDistance\\n  getTouchAngle: typeof utils.pointer.touchAngle\\n  getElementRect: typeof utils.dom.getElementRect\\n  getElementClientRect: typeof utils.dom.getElementClientRect\\n  matchesSelector: typeof utils.dom.matchesSelector\\n  closest: typeof utils.dom.closest\\n  addDocument: typeof scope.addDocument\\n  removeDocument: typeof scope.removeDocument\\n  version: string\\n}\\n\\nconst globalEvents: any = {}\\nconst scope = new Scope()\\n\\n/**\\n * ```js\\n * interact('#draggable').draggable(true)\\n *\\n * var rectables = interact('rect')\\n * rectables\\n *   .gesturable(true)\\n *   .on('gesturemove', function (event) {\\n *       // ...\\n *   })\\n * ```\\n *\\n * The methods of this variable can be used to set elements as interactables\\n * and also to change various default settings.\\n *\\n * Calling it as a function and passing an element or a valid CSS selector\\n * string returns an Interactable object which has various methods to configure\\n * it.\\n *\\n * @global\\n *\\n * @param {Element | string} target The HTML or SVG Element to interact with\\n * or CSS selector\\n * @return {Interactable}\\n */\\nexport const interact: InteractStatic = function interact (target: Interact.Target, options?: any) {\\n  let interactable = scope.interactables.get(target, options)\\n\\n  if (!interactable) {\\n    interactable = scope.interactables.new(target, options)\\n    interactable.events.global = globalEvents\\n  }\\n\\n  return interactable\\n} as InteractStatic\\n\\n/**\\n * Use a plugin\\n *\\n * @alias module:interact.use\\n *\\n * @param {Object} plugin\\n * @param {function} plugin.install\\n * @return {interact}\\n */\\ninteract.use = use\\nfunction use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\\n  scope.usePlugin(plugin, options)\\n\\n  return interact\\n}\\n\\n/**\\n * Check if an element or selector has been set with the {@link interact}\\n * function\\n *\\n * @alias module:interact.isSet\\n *\\n * @param {Element} element The Element being searched for\\n * @return {boolean} Indicates if the element or CSS selector was previously\\n * passed to interact\\n */\\ninteract.isSet = isSet\\nfunction isSet (target: Element, options?: any) {\\n  return !!scope.interactables.get(target, options &amp;&amp; options.context)\\n}\\n\\n/**\\n * Add a global listener for an InteractEvent or adds a DOM event to `document`\\n *\\n * @alias module:interact.on\\n *\\n * @param {string | array | object} type The types of events to listen for\\n * @param {function} listener The function event (s)\\n * @param {object | boolean} [options] object or useCapture flag for\\n * addEventListener\\n * @return {object} interact\\n */\\ninteract.on = on\\nfunction on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?) {\\n  if (utils.is.string(type) &amp;&amp; type.search(' ') !== -1) {\\n    type = type.trim().split(/ +/)\\n  }\\n\\n  if (utils.is.array(type)) {\\n    for (const eventType of (type as any[])) {\\n      interact.on(eventType, listener, options)\\n    }\\n\\n    return interact\\n  }\\n\\n  if (utils.is.object(type)) {\\n    for (const prop in type) {\\n      interact.on(prop, (type as Interact.EventTypes)[prop], listener)\\n    }\\n\\n    return interact\\n  }\\n\\n  // if it is an InteractEvent type, add listener to globalEvents\\n  if (utils.arr.contains(scope.actions.eventTypes, type)) {\\n    // if this type of event was never bound\\n    if (!globalEvents[type]) {\\n      globalEvents[type] = [listener]\\n    }\\n    else {\\n      globalEvents[type].push(listener)\\n    }\\n  }\\n  // If non InteractEvent type, addEventListener to document\\n  else {\\n    events.add(scope.document, type, listener as Interact.Listener, { options })\\n  }\\n\\n  return interact\\n}\\n\\n/**\\n * Removes a global InteractEvent listener or DOM event from `document`\\n *\\n * @alias module:interact.off\\n *\\n * @param {string | array | object} type The types of events that were listened\\n * for\\n * @param {function} listener The listener function to be removed\\n * @param {object | boolean} options [options] object or useCapture flag for\\n * removeEventListener\\n * @return {object} interact\\n */\\ninteract.off = off\\nfunction off (type, listener, options) {\\n  if (utils.is.string(type) &amp;&amp; type.search(' ') !== -1) {\\n    type = type.trim().split(/ +/)\\n  }\\n\\n  if (utils.is.array(type)) {\\n    for (const eventType of type) {\\n      interact.off(eventType, listener, options)\\n    }\\n\\n    return interact\\n  }\\n\\n  if (utils.is.object(type)) {\\n    for (const prop in type) {\\n      interact.off(prop, type[prop], listener)\\n    }\\n\\n    return interact\\n  }\\n\\n  if (!utils.arr.contains(scope.actions.eventTypes, type)) {\\n    events.remove(scope.document, type, listener, options)\\n  }\\n  else {\\n    let index\\n\\n    if (type in globalEvents &amp;&amp;\\n        (index = globalEvents[type].indexOf(listener)) !== -1) {\\n      globalEvents[type].splice(index, 1)\\n    }\\n  }\\n\\n  return interact\\n}\\n\\n/**\\n * Returns an object which exposes internal data\\n * @alias module:interact.debug\\n *\\n * @return {object} An object with properties that outline the current state\\n * and expose internal functions and variables\\n */\\ninteract.debug = debug\\nfunction debug () {\\n  return scope\\n}\\n\\n// expose the functions used to calculate multi-touch properties\\ninteract.getPointerAverage  = utils.pointer.pointerAverage\\ninteract.getTouchBBox       = utils.pointer.touchBBox\\ninteract.getTouchDistance   = utils.pointer.touchDistance\\ninteract.getTouchAngle      = utils.pointer.touchAngle\\n\\ninteract.getElementRect       = utils.dom.getElementRect\\ninteract.getElementClientRect = utils.dom.getElementClientRect\\ninteract.matchesSelector      = utils.dom.matchesSelector\\ninteract.closest              = utils.dom.closest\\n\\n/**\\n * @alias module:interact.supportsTouch\\n *\\n * @return {boolean} Whether or not the browser supports touch input\\n */\\ninteract.supportsTouch = supportsTouch\\nfunction supportsTouch () {\\n  return browser.supportsTouch\\n}\\n\\n/**\\n * @alias module:interact.supportsPointerEvent\\n *\\n * @return {boolean} Whether or not the browser supports PointerEvents\\n */\\ninteract.supportsPointerEvent = supportsPointerEvent\\nfunction supportsPointerEvent () {\\n  return browser.supportsPointerEvent\\n}\\n\\n/**\\n * Cancels all interactions (end events are not fired)\\n *\\n * @alias module:interact.stop\\n *\\n * @return {object} interact\\n */\\ninteract.stop = stop\\nfunction stop () {\\n  for (const interaction of scope.interactions.list) {\\n    interaction.stop()\\n  }\\n\\n  return interact\\n}\\n\\n/**\\n * Returns or sets the distance the pointer must be moved before an action\\n * sequence occurs. This also affects tolerance for tap events.\\n *\\n * @alias module:interact.pointerMoveTolerance\\n *\\n * @param {number} [newValue] The movement from the start position must be greater than this value\\n * @return {interact | number}\\n */\\ninteract.pointerMoveTolerance = pointerMoveTolerance\\nfunction pointerMoveTolerance (newValue) {\\n  if (utils.is.number(newValue)) {\\n    scope.interactions.pointerMoveTolerance = newValue\\n\\n    return interact\\n  }\\n\\n  return scope.interactions.pointerMoveTolerance\\n}\\n\\nscope.interactables.signals.on('unset', ({ interactable }) => {\\n  scope.interactables.list.splice(scope.interactables.list.indexOf(interactable), 1)\\n\\n  // Stop related interactions when an Interactable is unset\\n  for (const interaction of scope.interactions.list) {\\n    if (interaction.interactable === interactable &amp;&amp; interaction.interacting() &amp;&amp; interaction._ending) {\\n      interaction.stop()\\n    }\\n  }\\n})\\n\\ninteract.addDocument = (doc, options) => scope.addDocument(doc, options)\\ninteract.removeDocument = (doc) => scope.removeDocument(doc)\\n\\nscope.interact = interact\\n\\nexport { scope }\\nexport default interact\\n</code></pre>\\n        </article>\\n    </section>\\n\\n\\n\\n\\n\";"],"sourceRoot":""}