{"version":3,"sources":["webpack:///./src/docs/api/-_actions_drag.ts.html"],"names":["module","exports"],"mappings":"iGAAAA,EAAAC,QAAA","file":"js/chunk-2d21789d.b5bdeded.js","sourcesContent":["module.exports = \"<nav class=\\\"jsdoc-nav\\\">\\n<li class=\\\"nav-link nav-home-link\\\"><a href=\\\"/docs/api/index.html\\\">Home</a></li><li class=\\\"nav-heading\\\">Classes</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html\\\">DropEvent</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html#reject\\\">reject</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html\\\">Interactable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#context\\\">context</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#deltaSource\\\">deltaSource</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#draggable\\\">draggable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropCheck\\\">dropCheck</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropzone\\\">dropzone</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#fire\\\">fire</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#gesturable\\\">gesturable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#getRect\\\">getRect</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#off\\\">off</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#on\\\">on</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#origin\\\">origin</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#rectChecker\\\">rectChecker</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#reflow\\\">reflow</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#resizable\\\">resizable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#set\\\">set</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#unset\\\">unset</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"InteractEvent_InteractEvent.html\\\">InteractEvent</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"module.exports.html\\\">exports</a></span></li><li class=\\\"nav-heading\\\">Modules</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html#.maxInteractions\\\">maxInteractions</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-modifiers_snapEdges.html\\\">modifiers/snapEdges</a></span></li><li class=\\\"nav-heading\\\"><a href=\\\"global.html\\\">Globals</a></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-member\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#interact\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#preventDefault\\\">preventDefault</a></span></li>\\n</nav>\\n\\n\\n<h1 class=\\\"page-title\\\">/actions/drag.ts</h1>\\n\\n\\n\\n\\n\\n\\n    \\n    <section>\\n        <article>\\n            <pre class=\\\"prettyprint source linenums\\\"><code>import { ActionName, Scope } from '@interactjs/core/scope'\\nimport * as arr from '@interactjs/utils/arr'\\nimport * as is from '@interactjs/utils/is'\\n\\ndeclare module '@interactjs/core/Interactable' {\\n  interface Interactable {\\n    draggable: DraggableMethod\\n  }\\n}\\n\\ndeclare module '@interactjs/core/defaultOptions' {\\n  interface ActionDefaults {\\n    drag: Interact.DraggableOptions\\n  }\\n}\\n\\ndeclare module '@interactjs/core/scope' {\\n  interface Actions {\\n    [ActionName.Drag]?: typeof drag\\n  }\\n\\n  // eslint-disable-next-line no-shadow\\n  enum ActionName {\\n    Drag = 'drag'\\n  }\\n}\\n\\n(ActionName as any).Drag = 'drag'\\n\\nexport type DragEvent = Interact.InteractEvent&lt;ActionName.Drag>\\n\\nexport type DraggableMethod = Interact.ActionMethod&lt;Interact.DraggableOptions>\\n\\nfunction install (scope: Scope) {\\n  const {\\n    actions,\\n    Interactable,\\n    interactions,\\n    defaults,\\n  } = scope\\n\\n  interactions.signals.on('before-action-move', beforeMove)\\n  interactions.signals.on('action-resume', beforeMove)\\n\\n  // dragmove\\n  interactions.signals.on('action-move', move)\\n\\n  Interactable.prototype.draggable = drag.draggable\\n\\n  actions[ActionName.Drag] = drag\\n  actions.names.push(ActionName.Drag)\\n  arr.merge(actions.eventTypes, [\\n    'dragstart',\\n    'dragmove',\\n    'draginertiastart',\\n    'dragresume',\\n    'dragend',\\n  ])\\n  actions.methodDict.drag = 'draggable'\\n\\n  defaults.actions.drag = drag.defaults\\n}\\n\\nfunction beforeMove ({ interaction }) {\\n  if (interaction.prepared.name !== 'drag') { return }\\n\\n  const axis = interaction.prepared.axis\\n\\n  if (axis === 'x') {\\n    interaction.coords.cur.page.y   = interaction.coords.start.page.y\\n    interaction.coords.cur.client.y = interaction.coords.start.client.y\\n\\n    interaction.coords.velocity.client.y = 0\\n    interaction.coords.velocity.page.y   = 0\\n  }\\n  else if (axis === 'y') {\\n    interaction.coords.cur.page.x   = interaction.coords.start.page.x\\n    interaction.coords.cur.client.x = interaction.coords.start.client.x\\n\\n    interaction.coords.velocity.client.x = 0\\n    interaction.coords.velocity.page.x   = 0\\n  }\\n}\\n\\nfunction move ({ iEvent, interaction }) {\\n  if (interaction.prepared.name !== 'drag') { return }\\n\\n  const axis = interaction.prepared.axis\\n\\n  if (axis === 'x' || axis === 'y') {\\n    const opposite = axis === 'x' ? 'y' : 'x'\\n\\n    iEvent.page[opposite]   = interaction.coords.start.page[opposite]\\n    iEvent.client[opposite] = interaction.coords.start.client[opposite]\\n    iEvent.delta[opposite] = 0\\n  }\\n}\\n\\n/**\\n * ```js\\n * interact(element).draggable({\\n *     onstart: function (event) {},\\n *     onmove : function (event) {},\\n *     onend  : function (event) {},\\n *\\n *     // the axis in which the first movement must be\\n *     // for the drag sequence to start\\n *     // 'xy' by default - any direction\\n *     startAxis: 'x' || 'y' || 'xy',\\n *\\n *     // 'xy' by default - don't restrict to one axis (move in any direction)\\n *     // 'x' or 'y' to restrict movement to either axis\\n *     // 'start' to restrict movement to the axis the drag started in\\n *     lockAxis: 'x' || 'y' || 'xy' || 'start',\\n *\\n *     // max number of drags that can happen concurrently\\n *     // with elements of this Interactable. Infinity by default\\n *     max: Infinity,\\n *\\n *     // max number of drags that can target the same element+Interactable\\n *     // 1 by default\\n *     maxPerElement: 2\\n * })\\n *\\n * var isDraggable = interact('element').draggable(); // true\\n * ```\\n *\\n * Get or set whether drag actions can be performed on the target\\n *\\n * @alias Interactable.prototype.draggable\\n *\\n * @param {boolean | object} [options] true/false or An object with event\\n * listeners to be fired on drag events (object makes the Interactable\\n * draggable)\\n * @return {boolean | Interactable} boolean indicating if this can be the\\n * target of drag events, or this Interctable\\n */\\nconst draggable: DraggableMethod = function draggable (this: Interact.Interactable, options?: Interact.DraggableOptions | boolean): any {\\n  if (is.object(options)) {\\n    this.options.drag.enabled = options.enabled !== false\\n    this.setPerAction('drag', options)\\n    this.setOnEvents('drag', options)\\n\\n    if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\\n      this.options.drag.lockAxis = options.lockAxis\\n    }\\n    if (/^(xy|x|y)$/.test(options.startAxis)) {\\n      this.options.drag.startAxis = options.startAxis\\n    }\\n\\n    return this\\n  }\\n\\n  if (is.bool(options)) {\\n    this.options.drag.enabled = options\\n\\n    return this\\n  }\\n\\n  return this.options.drag\\n}\\n\\nconst drag: Interact.Plugin = {\\n  id: 'actions/drag',\\n  install,\\n  draggable,\\n  beforeMove,\\n  move,\\n  defaults: {\\n    startAxis : 'xy',\\n    lockAxis  : 'xy',\\n  } as Interact.DropzoneOptions,\\n\\n  checker (_pointer, _event, interactable) {\\n    const dragOptions = interactable.options.drag\\n\\n    return dragOptions.enabled\\n      ? {\\n        name: 'drag',\\n        axis: (dragOptions.lockAxis === 'start'\\n          ? dragOptions.startAxis\\n          : dragOptions.lockAxis),\\n      }\\n      : null\\n  },\\n\\n  getCursor () {\\n    return 'move'\\n  },\\n}\\n\\nexport default drag\\n</code></pre>\\n        </article>\\n    </section>\\n\\n\\n\\n\\n\";"],"sourceRoot":""}