{"version":3,"sources":["webpack:///./src/docs/api/-_core_Interactable.ts.html"],"names":["module","exports"],"mappings":"iGAAAA,EAAAC,QAAA","file":"js/chunk-2d21764a.ddd7afbf.js","sourcesContent":["module.exports = \"<nav class=\\\"jsdoc-nav\\\">\\n<li class=\\\"nav-link nav-home-link\\\"><a href=\\\"/docs/api/index.html\\\">Home</a></li><li class=\\\"nav-heading\\\">Classes</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html\\\">DropEvent</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"DropEvent.html#reject\\\">reject</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html\\\">Interactable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#context\\\">context</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#deltaSource\\\">deltaSource</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#draggable\\\">draggable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropCheck\\\">dropCheck</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#dropzone\\\">dropzone</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#fire\\\">fire</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#gesturable\\\">gesturable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#getRect\\\">getRect</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#off\\\">off</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#on\\\">on</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#origin\\\">origin</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#rectChecker\\\">rectChecker</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#reflow\\\">reflow</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#resizable\\\">resizable</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#set\\\">set</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"Interactable.html#unset\\\">unset</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"InteractEvent_InteractEvent.html\\\">InteractEvent</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-class\\\">C</span><span class=\\\"nav-item-name\\\"><a href=\\\"module.exports.html\\\">exports</a></span></li><li class=\\\"nav-heading\\\">Modules</li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-interact.html#.maxInteractions\\\">maxInteractions</a></span></li><li class=\\\"nav-heading\\\"><span class=\\\"nav-item-type type-module\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"module-modifiers_snapEdges.html\\\">modifiers/snapEdges</a></span></li><li class=\\\"nav-heading\\\"><a href=\\\"global.html\\\">Globals</a></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-member\\\">M</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#interact\\\">interact</a></span></li><li class=\\\"nav-item\\\"><span class=\\\"nav-item-type type-function\\\">F</span><span class=\\\"nav-item-name\\\"><a href=\\\"global.html#preventDefault\\\">preventDefault</a></span></li>\\n</nav>\\n\\n\\n<h1 class=\\\"page-title\\\">/core/Interactable.ts</h1>\\n\\n\\n\\n\\n\\n\\n    \\n    <section>\\n        <article>\\n            <pre class=\\\"prettyprint source linenums\\\"><code>import * as arr from '@interactjs/utils/arr'\\nimport browser from '@interactjs/utils/browser'\\nimport clone from '@interactjs/utils/clone'\\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\\nimport events from '@interactjs/utils/events'\\nimport extend from '@interactjs/utils/extend'\\nimport * as is from '@interactjs/utils/is'\\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\\nimport { getWindow } from '@interactjs/utils/window'\\nimport { ActionDefaults, Defaults, Options } from './defaultOptions'\\nimport Eventable from './Eventable'\\nimport { Actions } from './scope'\\n\\ntype IgnoreValue = string | Element | boolean\\n\\n/** */\\nexport class Interactable implements Partial&lt;Eventable> {\\n  protected get _defaults (): Defaults {\\n    return {\\n      base: {},\\n      perAction: {},\\n      actions: {} as ActionDefaults,\\n    }\\n  }\\n\\n  readonly options!: Required&lt;Options>\\n  readonly _actions: Actions\\n  readonly target: Interact.Target\\n  readonly events = new Eventable()\\n  readonly _context: Document | Element\\n  readonly _win: Window\\n  readonly _doc: Document\\n\\n  /** */\\n  constructor (target: Interact.Target, options: any, defaultContext: Document | Element) {\\n    this._actions = options.actions\\n    this.target   = target\\n    this._context = options.context || defaultContext\\n    this._win     = getWindow(trySelector(target) ? this._context : target)\\n    this._doc     = this._win.document\\n\\n    this.set(options)\\n  }\\n\\n  setOnEvents (actionName: string, phases: NonNullable&lt;any>) {\\n    if (is.func(phases.onstart)) { this.on(`${actionName}start`, phases.onstart) }\\n    if (is.func(phases.onmove)) { this.on(`${actionName}move`, phases.onmove) }\\n    if (is.func(phases.onend)) { this.on(`${actionName}end`, phases.onend) }\\n    if (is.func(phases.oninertiastart)) { this.on(`${actionName}inertiastart`, phases.oninertiastart) }\\n\\n    return this\\n  }\\n\\n  updatePerActionListeners (actionName, prev, cur) {\\n    if (is.array(prev) || is.object(prev)) {\\n      this.off(actionName, prev)\\n    }\\n\\n    if (is.array(cur) || is.object(cur)) {\\n      this.on(actionName, cur)\\n    }\\n  }\\n\\n  setPerAction (actionName, options: Interact.OrBoolean&lt;Options>) {\\n    const defaults = this._defaults\\n\\n    // for all the default per-action options\\n    for (const optionName in options) {\\n      const actionOptions = this.options[actionName]\\n      const optionValue = options[optionName]\\n      const isArray = is.array(optionValue)\\n\\n      // remove old event listeners and add new ones\\n      if (optionName === 'listeners') {\\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue)\\n      }\\n\\n      // if the option value is an array\\n      if (isArray) {\\n        actionOptions[optionName] = arr.from(optionValue)\\n      }\\n      // if the option value is an object\\n      else if (!isArray &amp;&amp; is.plainObject(optionValue)) {\\n        // copy the object\\n        actionOptions[optionName] = extend(\\n          actionOptions[optionName] || {},\\n          clone(optionValue))\\n\\n        // set anabled field to true if it exists in the defaults\\n        if (is.object(defaults.perAction[optionName]) &amp;&amp; 'enabled' in defaults.perAction[optionName]) {\\n          actionOptions[optionName].enabled = optionValue.enabled !== false\\n        }\\n      }\\n      // if the option value is a boolean and the default is an object\\n      else if (is.bool(optionValue) &amp;&amp; is.object(defaults.perAction[optionName])) {\\n        actionOptions[optionName].enabled = optionValue\\n      }\\n      // if it's anything else, do a plain assignment\\n      else {\\n        actionOptions[optionName] = optionValue\\n      }\\n    }\\n  }\\n\\n  /**\\n   * The default function to get an Interactables bounding rect. Can be\\n   * overridden using {@link Interactable.rectChecker}.\\n   *\\n   * @param {Element} [element] The element to measure.\\n   * @return {object} The object's bounding rectangle.\\n   */\\n  getRect (element: Element) {\\n    element = element || (is.element(this.target)\\n      ? this.target\\n      : null)\\n\\n    if (is.string(this.target)) {\\n      element = element || this._context.querySelector(this.target)\\n    }\\n\\n    return getElementRect(element)\\n  }\\n\\n  /**\\n   * Returns or sets the function used to calculate the interactable's\\n   * element's rectangle\\n   *\\n   * @param {function} [checker] A function which returns this Interactable's\\n   * bounding rectangle. See {@link Interactable.getRect}\\n   * @return {function | object} The checker function or this Interactable\\n   */\\n  rectChecker (checker: (element: Element) => any) {\\n    if (is.func(checker)) {\\n      this.getRect = checker\\n\\n      return this\\n    }\\n\\n    if (checker === null) {\\n      delete this.getRect\\n\\n      return this\\n    }\\n\\n    return this.getRect\\n  }\\n\\n  _backCompatOption (optionName, newValue) {\\n    if (trySelector(newValue) || is.object(newValue)) {\\n      this.options[optionName] = newValue\\n\\n      for (const action of this._actions.names) {\\n        this.options[action][optionName] = newValue\\n      }\\n\\n      return this\\n    }\\n\\n    return this.options[optionName]\\n  }\\n\\n  /**\\n   * Gets or sets the origin of the Interactable's element.  The x and y\\n   * of the origin will be subtracted from action event coordinates.\\n   *\\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\\n   * or any CSS selector\\n   *\\n   * @return {object} The current origin or this Interactable\\n   */\\n  origin (newValue) {\\n    return this._backCompatOption('origin', newValue)\\n  }\\n\\n  /**\\n   * Returns or sets the mouse coordinate types used to calculate the\\n   * movement of the pointer.\\n   *\\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\\n   * interacting; Use 'page' if you want autoScroll to work\\n   * @return {string | object} The current deltaSource or this Interactable\\n   */\\n  deltaSource (newValue) {\\n    if (newValue === 'page' || newValue === 'client') {\\n      this.options.deltaSource = newValue\\n\\n      return this\\n    }\\n\\n    return this.options.deltaSource\\n  }\\n\\n  /**\\n   * Gets the selector context Node of the Interactable. The default is\\n   * `window.document`.\\n   *\\n   * @return {Node} The context Node of this Interactable\\n   */\\n  context () {\\n    return this._context\\n  }\\n\\n  inContext (element) {\\n    return (this._context === element.ownerDocument ||\\n            nodeContains(this._context, element))\\n  }\\n\\n  testIgnoreAllow (this: Interactable, options: { ignoreFrom: IgnoreValue, allowFrom: IgnoreValue }, interactableElement: Element, eventTarget: Element) {\\n    return (!this.testIgnore(options.ignoreFrom, interactableElement, eventTarget) &amp;&amp;\\n            this.testAllow(options.allowFrom, interactableElement, eventTarget))\\n  }\\n\\n  testAllow (this: Interactable, allowFrom: IgnoreValue, interactableElement: Element, element: Element) {\\n    if (!allowFrom) { return true }\\n\\n    if (!is.element(element)) { return false }\\n\\n    if (is.string(allowFrom)) {\\n      return matchesUpTo(element, allowFrom, interactableElement)\\n    }\\n    else if (is.element(allowFrom)) {\\n      return nodeContains(allowFrom, element)\\n    }\\n\\n    return false\\n  }\\n\\n  testIgnore (this: Interactable, ignoreFrom: IgnoreValue, interactableElement: Element, element: Element) {\\n    if (!ignoreFrom || !is.element(element)) { return false }\\n\\n    if (is.string(ignoreFrom)) {\\n      return matchesUpTo(element, ignoreFrom, interactableElement)\\n    }\\n    else if (is.element(ignoreFrom)) {\\n      return nodeContains(ignoreFrom, element)\\n    }\\n\\n    return false\\n  }\\n\\n  /**\\n   * Calls listeners for the given InteractEvent type bound globally\\n   * and directly to this Interactable\\n   *\\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\\n   * Interactable\\n   * @return {Interactable} this Interactable\\n   */\\n  fire (iEvent) {\\n    this.events.fire(iEvent)\\n\\n    return this\\n  }\\n\\n  _onOff (method: 'on' | 'off', typeArg: Interact.EventTypes, listenerArg?: Interact.ListenersArg | null, options?: any) {\\n    if (is.object(typeArg) &amp;&amp; !is.array(typeArg)) {\\n      options = listenerArg\\n      listenerArg = null\\n    }\\n\\n    const addRemove = method === 'on' ? 'add' : 'remove'\\n    const listeners = normalizeListeners(typeArg, listenerArg)\\n\\n    for (let type in listeners) {\\n      if (type === 'wheel') { type = browser.wheelEvent }\\n\\n      for (const listener of listeners[type]) {\\n        // if it is an action event type\\n        if (arr.contains(this._actions.eventTypes, type)) {\\n          this.events[method](type, listener)\\n        }\\n        // delegated event\\n        else if (is.string(this.target)) {\\n          events[`${addRemove}Delegate`](this.target, this._context, type, listener, options)\\n        }\\n        // remove listener from this Interatable's element\\n        else {\\n          (events[addRemove] as typeof events.remove)(this.target, type, listener, options)\\n        }\\n      }\\n    }\\n\\n    return this\\n  }\\n\\n  /**\\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\\n   *\\n   * @param {string | array | object} types The types of events to listen\\n   * for\\n   * @param {function | array | object} [listener] The event listener function(s)\\n   * @param {object | boolean} [options] options object or useCapture flag for\\n   * addEventListener\\n   * @return {Interactable} This Interactable\\n   */\\n  on (types: Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\\n    return this._onOff('on', types, listener, options)\\n  }\\n\\n  /**\\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\\n   *\\n   * @param {string | array | object} types The types of events that were\\n   * listened for\\n   * @param {function | array | object} [listener] The event listener function(s)\\n   * @param {object | boolean} [options] options object or useCapture flag for\\n   * removeEventListener\\n   * @return {Interactable} This Interactable\\n   */\\n  off (types: string | string[] | Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\\n    return this._onOff('off', types, listener, options)\\n  }\\n\\n  /**\\n   * Reset the options of this Interactable\\n   *\\n   * @param {object} options The new settings to apply\\n   * @return {object} This Interactable\\n   */\\n  set (options: Interact.OptionsArg) {\\n    const defaults = this._defaults\\n\\n    if (!is.object(options)) {\\n      options = {}\\n    }\\n\\n    (this.options as Required&lt;Options>) = clone(defaults.base) as Required&lt;Options>\\n\\n    for (const actionName in this._actions.methodDict) {\\n      const methodName = this._actions.methodDict[actionName]\\n\\n      this.options[actionName] = {}\\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\\n\\n      this[methodName](options[actionName])\\n    }\\n\\n    for (const setting in options) {\\n      if (is.func(this[setting])) {\\n        this[setting](options[setting])\\n      }\\n    }\\n\\n    return this\\n  }\\n\\n  /**\\n   * Remove this interactable from the list of interactables and remove it's\\n   * action capabilities and event listeners\\n   *\\n   * @return {interact}\\n   */\\n  unset () {\\n    events.remove(this.target as Node, 'all')\\n\\n    if (is.string(this.target)) {\\n      // remove delegated events\\n      for (const type in events.delegatedEvents) {\\n        const delegated = events.delegatedEvents[type]\\n\\n        if (delegated.selectors[0] === this.target &amp;&amp;\\n            delegated.contexts[0] === this._context) {\\n          delegated.selectors.splice(0, 1)\\n          delegated.contexts.splice(0, 1)\\n          delegated.listeners.splice(0, 1)\\n\\n          // remove the arrays if they are empty\\n          if (!delegated.selectors.length) {\\n            delegated[type] = null\\n          }\\n        }\\n\\n        events.remove(this._context, type, events.delegateListener)\\n        events.remove(this._context, type, events.delegateUseCapture, true)\\n      }\\n    }\\n    else {\\n      events.remove(this.target as Node, 'all')\\n    }\\n  }\\n}\\n\\nexport default Interactable\\n</code></pre>\\n        </article>\\n    </section>\\n\\n\\n\\n\\n\";"],"sourceRoot":""}