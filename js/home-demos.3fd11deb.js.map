{"version":3,"sources":["webpack:///./src/demos/resizing.html","webpack:///./src/demos/drag-and-drop.html","webpack:///./src/demos/snapping.html","webpack:///./src/demos/pointer-events.html","webpack:///./src/demos/dragging.html","webpack:///./src/demos/pinch-to-zoom.html","webpack:///./src/views/homeDemos.js","webpack:///./src/demos/svg.html","webpack:///./src/demos/multi-touch.html"],"names":["module","exports","__webpack_require__","r","__webpack_exports__","_demos_dragging_html__WEBPACK_IMPORTED_MODULE_0__","_demos_dragging_html__WEBPACK_IMPORTED_MODULE_0___default","n","_demos_drag_and_drop_html__WEBPACK_IMPORTED_MODULE_1__","_demos_drag_and_drop_html__WEBPACK_IMPORTED_MODULE_1___default","_demos_snapping_html__WEBPACK_IMPORTED_MODULE_2__","_demos_snapping_html__WEBPACK_IMPORTED_MODULE_2___default","_demos_resizing_html__WEBPACK_IMPORTED_MODULE_3__","_demos_resizing_html__WEBPACK_IMPORTED_MODULE_3___default","_demos_multi_touch_html__WEBPACK_IMPORTED_MODULE_4__","_demos_multi_touch_html__WEBPACK_IMPORTED_MODULE_4___default","_demos_pinch_to_zoom_html__WEBPACK_IMPORTED_MODULE_5__","_demos_pinch_to_zoom_html__WEBPACK_IMPORTED_MODULE_5___default","_demos_svg_html__WEBPACK_IMPORTED_MODULE_6__","_demos_svg_html__WEBPACK_IMPORTED_MODULE_6___default","_demos_pointer_events_html__WEBPACK_IMPORTED_MODULE_7__","_demos_pointer_events_html__WEBPACK_IMPORTED_MODULE_7___default","dragging","dragAndDrop","snapping","resizing","multiTouch","pinchToZoom","svg","pointerEvents"],"mappings":"6FAAAA,EAAAC,QAAA,4gECAAD,EAAAC,QAAA,43FCAAD,EAAAC,QAAA,gmCCAAD,EAAAC,QAAA,6xCCAAD,EAAAC,QAAA,+lECAAD,EAAAC,QAAA,oJAAoKC,EAAQ,QAAuB,woDCAnMA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,QAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,QAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,QAAAS,EAAAT,EAAAK,EAAAG,GAAAE,EAAAV,EAAA,QAAAW,EAAAX,EAAAK,EAAAK,GAAAE,EAAAZ,EAAA,QAAAa,EAAAb,EAAAK,EAAAO,GAAAE,EAAAd,EAAA,QAAAe,EAAAf,EAAAK,EAAAS,GAAAE,EAAAhB,EAAA,QAAAiB,EAAAjB,EAAAK,EAAAW,GAAAE,EAAAlB,EAAA,QAAAmB,EAAAnB,EAAAK,EAAAa,GASehB,EAAA,YACbkB,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,yBCjBF7B,EAAAC,QAAA,knBCAAD,EAAAC,QAAA","file":"js/home-demos.3fd11deb.js","sourcesContent":["module.exports = \"<title>Resizing</title>\\n\\n<body>\\n<div class=\\\"resize-container\\\">\\n  <div class=\\\"resize-drag\\\">\\n     Resize from any edge or corner\\n  </div>\\n</div>\\n</body>\\n\\n<style>\\n.resize-drag {\\n  background-color: #29e;\\n  color: white;\\n  font-size: 20px;\\n  font-family: sans-serif;\\n  border-radius: 8px;\\n  padding: 20px;\\n  margin: 30px 20px;\\n  touch-action: none;\\n\\n  width: 120px;\\n\\n  /* This makes things *much* easier */\\n  box-sizing: border-box;\\n}\\n\\n.resize-container {\\n  display: inline-block;\\n  width: 100%;\\n  height: 240px;\\n}\\n</style>\\n\\n<script>\\ninteract('.resize-drag')\\n  .draggable({\\n    onmove: window.dragMoveListener,\\n    modifiers: [\\n      interact.modifiers.restrict({\\n        restriction: 'parent',\\n        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\\n      })\\n    ]\\n  })\\n  .resizable({\\n    // resize from all edges and corners\\n    edges: { left: true, right: true, bottom: true, top: true },\\n\\n    modifiers: [\\n      // keep the edges inside the parent\\n      interact.modifiers.restrictEdges({\\n        outer: 'parent',\\n        endOnly: true,\\n      }),\\n\\n      // minimum size\\n      interact.modifiers.restrictSize({\\n        min: { width: 100, height: 50 },\\n      }),\\n    ],\\n\\n    inertia: true\\n  })\\n  .on('resizemove', function (event) {\\n    var target = event.target,\\n        x = (parseFloat(target.getAttribute('data-x')) || 0),\\n        y = (parseFloat(target.getAttribute('data-y')) || 0);\\n\\n    // update the element's style\\n    target.style.width  = event.rect.width + 'px';\\n    target.style.height = event.rect.height + 'px';\\n\\n    // translate when resizing from top or left edges\\n    x += event.deltaRect.left;\\n    y += event.deltaRect.top;\\n\\n    target.style.webkitTransform = target.style.transform =\\n        'translate(' + x + 'px,' + y + 'px)';\\n\\n    target.setAttribute('data-x', x);\\n    target.setAttribute('data-y', y);\\n    target.textContent = Math.round(event.rect.width) + '\\\\u00D7' + Math.round(event.rect.height);\\n  });\\n</script>\\n\";","module.exports = \"<title> Drag and drop </title>\\n\\n<body>\\n<div id=\\\"no-drop\\\" class=\\\"drag-drop\\\"> #no-drop </div>\\n\\n<div id=\\\"yes-drop\\\" class=\\\"drag-drop\\\"> #yes-drop </div>\\n\\n<div id=\\\"outer-dropzone\\\" class=\\\"dropzone\\\">\\n  #outer-dropzone\\n  <div id=\\\"inner-dropzone\\\" class=\\\"dropzone\\\">#inner-dropzone</div>\\n </div>\\n</body>\\n\\n<style>\\n#outer-dropzone {\\n  height: 140px;\\n}\\n\\n#inner-dropzone {\\n  height: 80px;\\n}\\n\\n.dropzone {\\n  background-color: #ccc;\\n  border: dashed 4px transparent;\\n  border-radius: 4px;\\n  margin: 10px auto 30px;\\n  padding: 10px;\\n  width: 80%;\\n  transition: background-color 0.3s;\\n}\\n\\n.drop-active {\\n  border-color: #aaa;\\n}\\n\\n.drop-target {\\n  background-color: #29e;\\n  border-color: #fff;\\n  border-style: solid;\\n}\\n\\n.drag-drop {\\n  display: inline-block;\\n  min-width: 40px;\\n  padding: 2em 0.5em;\\n\\n  color: #fff;\\n  background-color: #29e;\\n  border: solid 2px #fff;\\n\\n  touch-action: none;\\n  -webkit-transform: translate(0px, 0px);\\n          transform: translate(0px, 0px);\\n\\n  transition: background-color 0.3s;\\n}\\n\\n.drag-drop.can-drop {\\n  color: #000;\\n  background-color: #4e4;\\n}\\n</style>\\n\\n<script>\\n/* The dragging code for '.draggable' from the demo above\\n * applies to this demo as well so it doesn't have to be repeated. */\\n\\n// enable draggables to be dropped into this\\ninteract('.dropzone').dropzone({\\n  // only accept elements matching this CSS selector\\n  accept: '#yes-drop',\\n  // Require a 75% element overlap for a drop to be possible\\n  overlap: 0.75,\\n\\n  // listen for drop related events:\\n\\n  ondropactivate: function (event) {\\n    // add active dropzone feedback\\n    event.target.classList.add('drop-active')\\n  },\\n  ondragenter: function (event) {\\n    var draggableElement = event.relatedTarget;\\n    var dropzoneElement = event.target;\\n\\n    // feedback the possibility of a drop\\n    dropzoneElement.classList.add('drop-target')\\n    draggableElement.classList.add('can-drop')\\n    draggableElement.textContent = 'Dragged in'\\n  },\\n  ondragleave: function (event) {\\n    // remove the drop feedback style\\n    event.target.classList.remove('drop-target')\\n    event.relatedTarget.classList.remove('can-drop')\\n    event.relatedTarget.textContent = 'Dragged out'\\n  },\\n  ondrop: function (event) {\\n    event.relatedTarget.textContent = 'Dropped'\\n  },\\n  ondropdeactivate: function (event) {\\n    // remove active dropzone feedback\\n    event.target.classList.remove('drop-active')\\n    event.target.classList.remove('drop-target')\\n  }\\n});\\n\\ninteract('.drag-drop')\\n  .draggable({\\n    inertia: true,\\n    modifiers: [\\n      interact.modifiers.restrict({\\n        restriction: \\\"parent\\\",\\n        endOnly: true,\\n        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\\n      })\\n    ],\\n    autoScroll: true,\\n    // dragMoveListener from the dragging demo above\\n    onmove: dragMoveListener\\n  });\\n\\n</script>\\n\";","module.exports = \"<title> Snapping </title>\\n\\n<body>\\n<div id=\\\"grid-snap\\\">\\n  Dragging is constrained to the corners of a grid\\n</div>\\n</body>\\n\\n<style>\\n#grid-snap {\\n  width: 40%;\\n  background-color: #29e;\\n  color: #fff;\\n  font-size: 1.2em;\\n  border-radius: 4px;\\n  padding: 2%;\\n  margin: 5%;\\n  touch-action: none;\\n}\\n</style>\\n\\n<script>\\nvar element = document.getElementById('grid-snap'),\\n    x = 0, y = 0;\\n\\ninteract(element)\\n  .draggable({\\n    modifiers: [\\n      interact.modifiers.snap({\\n        targets: [\\n          interact.createSnapGrid({ x: 30, y: 30 })\\n        ],\\n        range: Infinity,\\n        relativePoints: [ { x: 0, y: 0 } ]\\n      }),\\n      interact.modifiers.restrict({\\n        restriction: element.parentNode,\\n        elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\\n        endOnly: true\\n      })\\n    ],\\n    inertia: true,\\n  })\\n  .on('dragmove', function (event) {\\n    x += event.dx;\\n    y += event.dy;\\n\\n    event.target.style.webkitTransform =\\n    event.target.style.transform =\\n        'translate(' + x + 'px, ' + y + 'px)';\\n  });\\n</script>\\n\";","module.exports = \"<title>Tap, doubletap and hold</title>\\n\\n<body>\\n<div class=\\\"tap-target\\\">\\n  <p>Tap to change color</p>\\n  <p>Doubletap to change size</p>\\n  <p>Hold to rotate</p>\\n</div>\\n</body>\\n\\n<style>\\n.tap-target {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 14em;\\n  height: 16em;\\n  padding: 1em;\\n  margin: 10% auto;\\n\\n  border-radius: 100%;\\n\\n  font-size: 1.125em;\\n  text-align: center;\\n  color: #fff;\\n  background-color: #29e;\\n\\n  cursor: pointer;\\n  touch-action: none;\\n\\n  transition: all 0.3s;\\n}\\n\\n.tap-target.switch-bg {\\n  background-color: #f40;\\n}\\n\\n.tap-target.large {\\n  -webkit-transform: scale(1.25);\\n  transform: scale(1.25);\\n}\\n\\n.rotate {\\n  -webkit-transform: rotate(180deg);\\n  transform: rotate(180deg);\\n}\\n\\n</style>\\n\\n<script>\\ninteract('.tap-target')\\n  .on('tap', function (event) {\\n    event.currentTarget.classList.toggle('switch-bg');\\n    event.preventDefault();\\n  })\\n  .on('doubletap', function (event) {\\n    event.currentTarget.classList.toggle('large');\\n    event.currentTarget.classList.remove('rotate');\\n    event.preventDefault();\\n  })\\n  .on('hold', function (event) {\\n    event.currentTarget.classList.toggle('rotate');\\n    event.currentTarget.classList.remove('large');\\n  });\\n</script>\\n\";","module.exports = \"<title>Dragging</title>\\n\\n<body>\\n<div id=\\\"drag-1\\\" class=\\\"draggable\\\">\\n  <p> You can drag one element </p>\\n</div>\\n<div id=\\\"drag-2\\\" class=\\\"draggable\\\">\\n  <p> with each pointer </p>\\n</div>\\n</body>\\n\\n<style>\\n#drag-1, #drag-2 {\\n  width: 25%;\\n  min-height: 6.5em;\\n  margin: 10%;\\n  background-color: #29e;\\n  color: white;\\n  border-radius: 0.75em;\\n  padding: 4%;\\n  touch-action: none;\\n  user-select: none;\\n  -webkit-transform: translate(0px, 0px);\\n          transform: translate(0px, 0px);\\n}\\n</style>\\n\\n<script>\\n// target elements with the \\\"draggable\\\" class\\ninteract('.draggable')\\n  .draggable({\\n    // enable inertial throwing\\n    inertia: true,\\n    // keep the element within the area of it's parent\\n    modifiers: [\\n      interact.modifiers.restrict({\\n        restriction: \\\"parent\\\",\\n        endOnly: true,\\n        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\\n      }),\\n    ],\\n    // enable autoScroll\\n    autoScroll: true,\\n\\n    // call this function on every dragmove event\\n    onmove: dragMoveListener,\\n    // call this function on every dragend event\\n    onend: function (event) {\\n      var textEl = event.target.querySelector('p');\\n\\n      textEl && (textEl.textContent =\\n        'moved a distance of '\\n        + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\\n                     Math.pow(event.pageY - event.y0, 2) | 0))\\n            .toFixed(2) + 'px');\\n    }\\n  });\\n\\n  function dragMoveListener (event) {\\n    var target = event.target,\\n        // keep the dragged position in the data-x/data-y attributes\\n        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\\n        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\\n\\n    // translate the element\\n    target.style.webkitTransform =\\n    target.style.transform =\\n      'translate(' + x + 'px, ' + y + 'px)';\\n\\n    // update the posiion attributes\\n    target.setAttribute('data-x', x);\\n    target.setAttribute('data-y', y);\\n  }\\n\\n  // this is used later in the resizing and gesture demos\\n  window.dragMoveListener = dragMoveListener;\\n</script>\\n\";","module.exports = \"<title>Pinch-to-zoom (touchscreen only)</title>\\n\\n<body>\\n<!-- enable javascript to view a demo -->\\n<div id=\\\"gesture-area\\\">\\n  <img src=\\\"\" + require(\"../assets/ijs-256.png\") + \"\\\" id=\\\"scale-element\\\">\\n</div>\\n</body>\\n\\n<style>\\n#scale-element {\\n  display: block;\\n  max-width: 100%;\\n  margin: auto;\\n  touch-action: none;\\n}\\n\\n#scale-element.reset {\\n  transition: -webkit-transform 0.3s ease-in-out;\\n  transition: transform 0.3s ease-in-out;\\n}\\n</style>\\n\\n<script>\\nvar angleScale = {\\n  angle: 0,\\n  scale: 1,\\n}\\nvar gestureArea = document.getElementById('gesture-area')\\nvar scaleElement = document.getElementById('scale-element')\\nvar resetTimeout\\n\\ninteract(gestureArea)\\n  .gesturable({\\n    onstart: function (event) {\\n      angleScale.angle -= event.angle\\n\\n      clearTimeout(resetTimeout)\\n      scaleElement.classList.remove('reset')\\n    },\\n    onmove: function (event) {\\n      // document.body.appendChild(new Text(event.scale))\\n      var currentAngle = event.angle + angleScale.angle\\n      var currentScale = event.scale * angleScale.scale\\n\\n      scaleElement.style.webkitTransform =\\n      scaleElement.style.transform =\\n        'rotate(' + currentAngle + 'deg)' + 'scale(' + currentScale + ')'\\n\\n      // uses the dragMoveListener from the draggable demo above\\n      dragMoveListener(event)\\n    },\\n    onend: function (event) {\\n      angleScale.angle = angleScale.angle + event.angle\\n      angleScale.scale = angleScale.scale * event.scale\\n\\n      resetTimeout = setTimeout(reset, 1000)\\n      scaleElement.classList.add('reset')\\n    }\\n  })\\n  .draggable({ onmove: dragMoveListener })\\n\\nfunction reset () {\\n  scaleElement.style.webkitTransform =\\n    scaleElement.style.transform =\\n    'scale(1)'\\n\\n  angleScale.angle = 0\\n  angleScale.scale = 1\\n}\\n</script>\\n\";","import dragging from '../demos/dragging.html'\nimport dragAndDrop from '../demos/drag-and-drop.html'\nimport snapping from '../demos/snapping.html'\nimport resizing from '../demos/resizing.html'\nimport multiTouch from '../demos/multi-touch.html'\nimport pinchToZoom from '../demos/pinch-to-zoom.html'\nimport svg from '../demos/svg.html'\nimport pointerEvents from '../demos/pointer-events.html'\n\nexport default [\n  dragging,\n  dragAndDrop,\n  snapping,\n  resizing,\n  multiTouch,\n  pinchToZoom,\n  svg,\n  pointerEvents\n]\n","module.exports = \"<title>Use in SVG files</title>\\n\\n<body>\\n<object id=\\\"star-demo\\\" type=\\\"image/svg+xml\\\" data=\\\"/img/star.svg\\\"></object>\\n\\n<p style=\\\"padding: 0 5%\\\">\\n  The <a href=\\\"https://github.com/interactjs/interactjs.github.io/blob/source/source/images/star.svg\\\">star.svg</a>\\n  file references interact.js as well as\\n  <a href=\\\"https://github.com/interactjs/interactjs.github.io/blob/source/source/javascripts/star.js\\\"> another script</a>\\n  to enable and respond to drag events.\\n</p>\\n</body>\\n\\n<style>\\n#star-demo {\\n  display: block;\\n  margin: auto;\\n  touch-action: none;\\n  max-height: 100%;\\n}\\n</style>\\n\";","module.exports = \"<title>Multi-touch Rotation (touchscreen only)</title>\\n\\n<body>\\n<div id=\\\"rotate-area\\\">\\n  <div id=\\\"angle-info\\\">0&deg;</div>\\n  <svg id=\\\"arrow\\\" viewBox=\\\"0 0 100 100\\\">\\n    <polygon\\n      points=\\\"50,0 75,25 62.5,25 62.5,100 37.5,100 37.5,25 25,25\\\"\\n      fill=\\\"#29e\\\" />\\n  </svg>\\n</div>\\n</body>\\n\\n<style>\\n#rotate-area {\\n  margin: 3em;\\n  overflow: hidden;\\n  touch-action: none;\\n}\\n\\n#arrow {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#angle-info {\\n  color: #666;\\n  font-size: 2em;\\n  position: absolute;\\n}\\n</style>\\n\\n<script>\\nvar angle = 0;\\n\\ninteract('#rotate-area').gesturable({\\n  onmove: function (event) {\\n    var arrow = document.getElementById('arrow');\\n\\n    angle += event.da;\\n\\n    arrow.style.webkitTransform =\\n    arrow.style.transform =\\n      'rotate(' + angle + 'deg)';\\n\\n    document.getElementById('angle-info').textContent =\\n      angle.toFixed(2) + '\\\\u00b0';\\n  }\\n});\\n</script>\\n\";"],"sourceRoot":""}